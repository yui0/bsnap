// ignore_for_file: always_specify_types
// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Bindings for `src/ncnn_ai.h`.
///
/// Regenerate bindings with `flutter pub run ffigen --config ffigen.yaml`.
///
class NcnnYoloxBindings {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NcnnYoloxBindings(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NcnnYoloxBindings.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  int styletransfer(
    ffi.Pointer<ffi.Char> model,
    ffi.Pointer<ffi.Uint8> p,
    int w,
    int h,
    ffi.Pointer<ffi.Uint8> o,
    int ow,
    int oh,
  ) {
    return _styletransfer(
      model,
      p,
      w,
      h,
      o,
      ow,
      oh,
    );
  }

  late final _styletransferPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int,
              ffi.Int)>>('styletransfer');
  late final _styletransfer = _styletransferPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Uint8>, int, int,
          ffi.Pointer<ffi.Uint8>, int, int)>();

  ffi.Pointer<YoloX> yoloxCreate() {
    return _yoloxCreate();
  }

  late final _yoloxCreatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<YoloX> Function()>>('yoloxCreate');
  late final _yoloxCreate =
      _yoloxCreatePtr.asFunction<ffi.Pointer<YoloX> Function()>();

  void yoloxDestroy(
    ffi.Pointer<YoloX> yolox,
  ) {
    return _yoloxDestroy(
      yolox,
    );
  }

  late final _yoloxDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<YoloX>)>>(
          'yoloxDestroy');
  late final _yoloxDestroy =
      _yoloxDestroyPtr.asFunction<void Function(ffi.Pointer<YoloX>)>();

  ffi.Pointer<DetectResult> detectResultCreate() {
    return _detectResultCreate();
  }

  late final _detectResultCreatePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<DetectResult> Function()>>(
          'detectResultCreate');
  late final _detectResultCreate =
      _detectResultCreatePtr.asFunction<ffi.Pointer<DetectResult> Function()>();

  void detectResultDestroy(
    ffi.Pointer<DetectResult> result,
  ) {
    return _detectResultDestroy(
      result,
    );
  }

  late final _detectResultDestroyPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<DetectResult>)>>(
          'detectResultDestroy');
  late final _detectResultDestroy = _detectResultDestroyPtr
      .asFunction<void Function(ffi.Pointer<DetectResult>)>();

  int detectWithImagePath(
    ffi.Pointer<YoloX> yolox,
    ffi.Pointer<ffi.Char> image_path,
    ffi.Pointer<DetectResult> result,
  ) {
    return _detectWithImagePath(
      yolox,
      image_path,
      result,
    );
  }

  late final _detectWithImagePathPtr = _lookup<
      ffi.NativeFunction<
          yolox_err_t Function(ffi.Pointer<YoloX>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<DetectResult>)>>('detectWithImagePath');
  late final _detectWithImagePath = _detectWithImagePathPtr.asFunction<
      int Function(ffi.Pointer<YoloX>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<DetectResult>)>();

  int detectWithPixels(
    ffi.Pointer<YoloX> yolox,
    ffi.Pointer<ffi.Uint8> pixels,
    int pixelType,
    int img_w,
    int img_h,
    ffi.Pointer<DetectResult> result,
  ) {
    return _detectWithPixels(
      yolox,
      pixels,
      pixelType,
      img_w,
      img_h,
      result,
    );
  }

  late final _detectWithPixelsPtr = _lookup<
      ffi.NativeFunction<
          yolox_err_t Function(
              ffi.Pointer<YoloX>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Int32,
              ffi.Int,
              ffi.Int,
              ffi.Pointer<DetectResult>)>>('detectWithPixels');
  late final _detectWithPixels = _detectWithPixelsPtr.asFunction<
      int Function(ffi.Pointer<YoloX>, ffi.Pointer<ffi.Uint8>, int, int, int,
          ffi.Pointer<DetectResult>)>();
}

final class YoloX extends ffi.Struct {
  /// path to model file
  external ffi.Pointer<ffi.Char> model_path;

  /// path to param file
  external ffi.Pointer<ffi.Char> param_path;

  /// nms threshold
  @ffi.Float()
  external double nms_thresh;

  /// threshold of bounding box prob
  @ffi.Float()
  external double conf_thresh;

  /// target image size after resize, might use 416 for small model
  @ffi.Float()
  external double target_size;
}

/// ncnn::Mat::PixelType
abstract class PixelType {
  static const int PIXEL_RGB = 1;
  static const int PIXEL_BGR = 2;
  static const int PIXEL_GRAY = 3;
  static const int PIXEL_RGBA = 4;
  static const int PIXEL_BGRA = 5;
}

final class Rect extends ffi.Struct {
  @ffi.Float()
  external double x;

  @ffi.Float()
  external double y;

  @ffi.Float()
  external double w;

  @ffi.Float()
  external double h;
}

final class Object extends ffi.Struct {
  @ffi.Int()
  external int label;

  @ffi.Float()
  external double prob;

  external Rect rect;
}

final class DetectResult extends ffi.Struct {
  @ffi.Int()
  external int object_num;

  external ffi.Pointer<Object> object;
}

typedef yolox_err_t = ffi.Int;
typedef Dartyolox_err_t = int;

const int YOLOX_OK = 0;

const int YOLOX_ERROR = -1;
